// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Parent {
  id String @id @default(uuid())

  auth           Auth?
  fullname       String
  contact_number String   @unique
  address        Address? @relation(fields: [address_id], references: [id])
  address_id     String?
  image          String?
  role           Role     @default(Parent)

  created   DateTime  @default(now())
  updated   DateTime  @updatedAt
  lastLogin DateTime?

  Token  Token[]
  Infant Infant[]
}

model Auth {
  id String @id @default(uuid())

  email String @unique

  Parent    Parent @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id String @unique

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Token {
  id String @id @default(uuid())

  type       Type     @default(EMAIL) // EMAIL || API
  emailToken String?  @unique
  valid      Boolean  @default(true)
  expiration DateTime

  Parent    Parent? @relation(fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id String?

  created DateTime @default(now())
  updated DateTime @updatedAt
}

enum Type {
  EMAIL
  API
}

enum Role {
  Parent
  Admin
}

enum Gender {
  Male
  Female
}

model Infant {
  id String @id @default(uuid())

  fullname       String
  birthday       Birthday? @relation(fields: [birthday_id], references: [id])
  birthday_id    String?
  place_of_birth String
  address        Address?  @relation(fields: [address_id], references: [id])
  address_id     String?
  height         Float
  gender         Gender
  weight         Float
  mothers_name   String
  fathers_name   String
  health_center  String
  family_no      Int

  image String?

  immunization_progress String?
  immunization_status   String?

  Parent    Parent @relation(fields: [parent_id], references: [id])
  parent_id String @unique

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Birthday {
  id String @id @default(uuid())

  month String
  day   Int
  year  Int

  infant Infant[]

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Address {
  id String @id @default(uuid())

  purok        String
  baranggay    String
  municipality String
  province     String

  infant Infant[]

  Parent Parent[]

  created DateTime @default(now())
  updated DateTime @updatedAt
}

//TODO: add relationship to these models below
model Vaccination {
  id String @id @default(uuid())

  vaccine_name      String
  vaccine_type_code String

  dose_number            String
  site_of_administration String //eg. left arm, right arm, or thigh
  administration_route   String //eg. oral, intramascular,subcutaneous

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Vaccination_Schedule {
  id String @id @default(uuid())

  date_of_vaccination    DateTime
  schedule_for_next_dose DateTime

  created DateTime @default(now())
  updated DateTime @updatedAt
}

model Vaccination_Record {
  id String @id @default(uuid())

  created DateTime @default(now())
  updated DateTime @updatedAt
}

//TODO: add model connected to vaccination

// model Screening {
//   id      String   @id @default(uuid())

//   created DateTime @default(now())
//   updated DateTime @updatedAt
// }
