{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/natha/OneDrive/Desktop/infantguardadmin/src/context/AuthContextProvider.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\ninterface AuthContextType {\r\n  authToken: string | null;\r\n  updateAuthToken: (newToken: string | null) => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthContextProvider = ({\r\n  children,\r\n}: {\r\n  children: React.ReactNode;\r\n}) => {\r\n  const [authToken, setAuthToken] = useState<string | null>(null);\r\n\r\n  const router = useRouter();\r\n\r\n  // Load token from localStorage (or cookies)\r\n  useEffect(() => {\r\n    const loadAuthToken = () => {\r\n      const storedToken = localStorage.getItem(\"authToken\");\r\n      if (storedToken) {\r\n        setAuthToken(storedToken);\r\n      }\r\n    };\r\n    loadAuthToken();\r\n  }, []);\r\n\r\n  // Redirect user based on authentication status\r\n  useEffect(() => {\r\n    if (!authToken) {\r\n      router.replace(\"/auth/login\");\r\n    }\r\n    if (authToken) {\r\n      router.replace(\"/\");\r\n    }\r\n  }, [authToken, router]);\r\n\r\n  // Update auth token when user logs in or out\r\n  const updateAuthToken = async (newToken: string | null) => {\r\n    if (newToken) {\r\n      localStorage.setItem(\"authToken\", newToken);\r\n    } else {\r\n      localStorage.removeItem(\"authToken\");\r\n    }\r\n    setAuthToken(newToken);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authToken, updateAuthToken }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Helper function to use auth context\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth must be used within an AuthContextProvider\");\r\n  }\r\n  return context;\r\n};\r\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAHA;;;;AAUA,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,MAAM,sBAAsB,CAAC,EAClC,QAAQ,EAGT;IACC,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAE1D,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IAEvB,4CAA4C;IAC5C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,gBAAgB;YACpB,MAAM,cAAc,aAAa,OAAO,CAAC;YACzC,IAAI,aAAa;gBACf,aAAa;YACf;QACF;QACA;IACF,GAAG,EAAE;IAEL,+CAA+C;IAC/C,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,WAAW;YACd,OAAO,OAAO,CAAC;QACjB;QACA,IAAI,WAAW;YACb,OAAO,OAAO,CAAC;QACjB;IACF,GAAG;QAAC;QAAW;KAAO;IAEtB,6CAA6C;IAC7C,MAAM,kBAAkB,OAAO;QAC7B,IAAI,UAAU;YACZ,aAAa,OAAO,CAAC,aAAa;QACpC,OAAO;YACL,aAAa,UAAU,CAAC;QAC1B;QACA,aAAa;IACf;IAEA,qBACE,8OAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAW;QAAgB;kBACvD;;;;;;AAGP;AAGO,MAAM,UAAU;IACrB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,CAAC,SAAS;QACZ,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/natha/OneDrive/Desktop/infantguardadmin/src/libraries/API/Auth/config.tsx"],"sourcesContent":["export const API_URL = \"http://192.168.1.22:3007/api\";\r\n// export const API_URL = \"https://chowpao-pos-inventory-1.onrender.com/api\";\r\n"],"names":[],"mappings":";;;AAAO,MAAM,UAAU,gCACvB,6EAA6E"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/natha/OneDrive/Desktop/infantguardadmin/src/libraries/API/ProtectedRoute/secureRoutes.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { createContext, PropsWithChildren, useContext } from \"react\";\r\nimport { API_URL } from \"../Auth/config\";\r\nimport { useAuth } from \"@/context/AuthContextProvider\";\r\nimport { Parent } from \"@/app/home/parent/types\";\r\n\r\ninterface ProtectedRoutesType {\r\n  vaccinePercentageRoutes: () => Promise<unknown>;\r\n  parentsList: () => Promise<unknown>;\r\n  infantList: () => Promise<unknown>;\r\n  deleteParent: (id: string) => Promise<unknown>;\r\n  updateParent: (updatedParent: Parent) => Promise<unknown>;\r\n  createInfant: (\r\n    fullname: string,\r\n    month: number,\r\n    day: number,\r\n    year: number,\r\n    purok: string,\r\n    baranggay: string,\r\n    municipality: string,\r\n    province: string,\r\n    place_of_birth: string,\r\n    height: number,\r\n    gender: string,\r\n    weight: number,\r\n    mothers_name: string,\r\n    fathers_name: string,\r\n    contact_number: string,\r\n    health_center: string,\r\n    family_no: number\r\n  ) => Promise<unknown>;\r\n  UploadChildProfileImage: (id: string, imageFile: File) => Promise<unknown>;\r\n  deleteInfants: (ids: string[]) => Promise<unknown>;\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  updateInfant: (data: any, id: string) => Promise<unknown>;\r\n  getOneInfantDetail: (id: string) => Promise<unknown>;\r\n  updateVaccineStatus: (\r\n    id: string,\r\n    doseType: string,\r\n    status: string\r\n  ) => Promise<unknown>;\r\n  getPushToken: (\r\n    infant_id: string,\r\n    title: string,\r\n    body: string,\r\n    data: string\r\n  ) => Promise<unknown>;\r\n  updatVaccineSchedDate: (\r\n    vaccineSchedule_id: string,\r\n    doseType: string,\r\n    date: string\r\n  ) => Promise<unknown>;\r\n  getAdminDataDashBoard: () => Promise<unknown>;\r\n  CreateVaccineSchedule: (id: string) => Promise<unknown>;\r\n  CreateVaccineProgress: (id: string) => Promise<unknown>;\r\n  infantDataDownload: () => Promise<unknown>;\r\n  UploadDocumentToInfant: (id: string, pdfUri: File) => Promise<unknown>;\r\n  downloadInfantVaccineProgress: (id: string) => Promise<unknown>;\r\n}\r\n\r\nconst ProtectedRoutesContext = createContext<ProtectedRoutesType | undefined>(\r\n  undefined\r\n);\r\n\r\nexport const ProtectedRoutesContextProvider = ({\r\n  children,\r\n}: PropsWithChildren) => {\r\n  //the authtoken is getting from auth context provider\r\n  const { authToken } = useAuth();\r\n\r\n  const vaccinePercentageRoutes = async () => {\r\n    const res = await fetch(`${API_URL}/admin/percentage`, {\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n    });\r\n\r\n    if (!res.ok) {\r\n      // Check if response is not OK (status code not in range 200-299)\r\n      let errorMessage = \"Failed to get infant details\";\r\n      const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n      // Check if response body has an error message from the backend\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const parentsList = async () => {\r\n    const res = await fetch(`${API_URL}/admin/parents`, {\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n    });\r\n\r\n    if (!res.ok) {\r\n      // Check if response is not OK (status code not in range 200-299)\r\n      let errorMessage = \"Failed to get infant details\";\r\n      const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n      // Check if response body has an error message from the backend\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const infantList = async () => {\r\n    const res = await fetch(`${API_URL}/admin/infants`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n    });\r\n\r\n    if (!res.ok) {\r\n      // Check if response is not OK (status code not in range 200-299)\r\n      let errorMessage = \"Failed to get infant details\";\r\n      const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n      // Check if response body has an error message from the backend\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const deleteParent = async (id: string) => {\r\n    const res = await fetch(`${API_URL}/admin/delete/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n    });\r\n\r\n    if (!res.ok) {\r\n      // Check if response is not OK (status code not in range 200-299)\r\n      let errorMessage = \"Failed to delete parent\";\r\n      const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n      // Check if response body has an error message from the backend\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const updateParent = async (updatedParent: any) => {\r\n    const res = await fetch(`${API_URL}/admin/update/${updatedParent.id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n      body: JSON.stringify({\r\n        fullname: updatedParent.fullname,\r\n        contact_number: updatedParent.contact_number,\r\n        address: updatedParent.address,\r\n        auth: {\r\n          email: updatedParent.auth.email,\r\n        },\r\n      }),\r\n    });\r\n\r\n    if (!res.ok) {\r\n      let errorMessage = \"Failed to update parent\";\r\n      const responseBody = await res.json();\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const createInfant = async (\r\n    fullname: string,\r\n    month: number,\r\n    day: number,\r\n    year: number,\r\n    purok: string,\r\n    baranggay: string,\r\n    municipality: string,\r\n    province: string,\r\n    place_of_birth: string,\r\n    height: number,\r\n    gender: string,\r\n    weight: number,\r\n    mothers_name: string,\r\n    fathers_name: string,\r\n    contact_number: string,\r\n    health_center: string,\r\n    family_no: number\r\n  ) => {\r\n    const data = {\r\n      fullname: fullname,\r\n      birthday: {\r\n        month: month,\r\n        day: day,\r\n        year: year,\r\n      },\r\n      address: {\r\n        purok: purok,\r\n        baranggay: baranggay,\r\n        municipality: municipality,\r\n        province: province,\r\n      },\r\n      place_of_birth: place_of_birth,\r\n      height: height,\r\n      gender: gender,\r\n      weight: weight,\r\n      mothers_name: mothers_name,\r\n      fathers_name: fathers_name,\r\n      contact_number: contact_number,\r\n      health_center: health_center,\r\n      family_no: family_no,\r\n    };\r\n    const res = await fetch(`${API_URL}/admin/create`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!res.ok) {\r\n      let errorMessage = \"Failed to create infant\";\r\n      const responseBody = await res.json();\r\n      if (responseBody?.message) errorMessage = responseBody.message;\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const UploadChildProfileImage = async (id: string, imageFile: File) => {\r\n    const formData = new FormData();\r\n    formData.append(\"image\", imageFile);\r\n\r\n    try {\r\n      const res = await fetch(`${API_URL}/parent/upload-img/${id}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${authToken}`,\r\n          // Note: Do not set 'Content-Type' header when sending FormData\r\n        },\r\n        body: formData,\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const responseBody = await res.json();\r\n        throw new Error(responseBody?.message);\r\n      }\r\n\r\n      return await res.json();\r\n    } catch (error) {\r\n      console.error(\"Error Updating Infant Image:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const deleteInfants = async (ids: string[]) => {\r\n    const res = await fetch(`${API_URL}/admin/infants-delete`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n      body: JSON.stringify({ ids }), // Send IDs in request body\r\n    });\r\n\r\n    if (!res.ok) {\r\n      let errorMessage = \"Failed to delete infants\";\r\n      try {\r\n        const responseBody = await res.json();\r\n        if (responseBody && responseBody.message) {\r\n          errorMessage = responseBody.message;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error parsing response:\", error);\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  const updateInfant = async (data: any, id: string) => {\r\n    const res = await fetch(`${API_URL}/admin/infant-update/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!res.ok) {\r\n      let errorMessage = \"Failed to update parent\";\r\n      const responseBody = await res.json();\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const getOneInfantDetail = async (id: string) => {\r\n    const res = await fetch(`${API_URL}/admin/infant/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n    });\r\n\r\n    if (!res.ok) {\r\n      // Check if response is not OK (status code not in range 200-299)\r\n      let errorMessage = \"Failed to get infant detail\";\r\n      const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n      // Check if response body has an error message from the backend\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const updateVaccineStatus = async (\r\n    id: string,\r\n    doseType: string,\r\n    status: string\r\n  ) => {\r\n    const data = { id, doseType, status };\r\n\r\n    console.log(\"Sending PUT request to update vaccine status:\", data);\r\n\r\n    const res = await fetch(`${API_URL}/admin/update-progress`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    console.log(\"Response Status:\", res.status);\r\n\r\n    if (!res.ok) {\r\n      let errorMessage = \"Failed to update vaccine status\";\r\n      const responseBody = await res.json();\r\n      console.error(\"Error Response:\", responseBody);\r\n\r\n      if (responseBody && responseBody.error) {\r\n        errorMessage = responseBody.error;\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const getPushToken = async (\r\n    infant_id: string,\r\n    title: string,\r\n    body: string,\r\n    data: string\r\n  ) => {\r\n    const payload = {\r\n      title: title,\r\n      body: body,\r\n      data: {\r\n        received: data,\r\n      },\r\n    };\r\n\r\n    const res = await fetch(`${API_URL}/admin/notify/${infant_id}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n      body: JSON.stringify(payload),\r\n    });\r\n\r\n    if (!res.ok) {\r\n      // Check if response is not OK (status code not in range 200-299)\r\n      let errorMessage = \"Failed to get infant push token\";\r\n      const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n      // Check if response body has an error message from the backend\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const updatVaccineSchedDate = async (\r\n    vaccineSchedule_id: string,\r\n    doseType: string,\r\n    date: string\r\n  ) => {\r\n    const data = { id: vaccineSchedule_id, doseType, date };\r\n\r\n    const res = await fetch(`${API_URL}/admin/update-vaccine-schedule-date`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    if (!res.ok) {\r\n      let errorMessage = \"Failed to update vaccine date\";\r\n      const responseBody = await res.json();\r\n      console.error(\"Error Response:\", responseBody);\r\n\r\n      if (responseBody && responseBody.error) {\r\n        errorMessage = responseBody.error;\r\n      }\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const getAdminDataDashBoard = async () => {\r\n    const res = await fetch(`${API_URL}/admin/home-admin`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n    });\r\n\r\n    if (!res.ok) {\r\n      // Check if response is not OK (status code not in range 200-299)\r\n      let errorMessage = \"Failed to get admin dashboard data\";\r\n      const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n      // Check if response body has an error message from the backend\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const CreateVaccineSchedule = async (id: string) => {\r\n    const data = {\r\n      infant_id: id,\r\n    };\r\n\r\n    try {\r\n      const res = await fetch(`${API_URL}/parent/vaccine`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${authToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        // Check if response is not OK (status code not in range 200-299)\r\n        let errorMessage = \"Failed to create vaccine schedule\";\r\n        const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n        // Check if response body has an error message from the backend\r\n        if (responseBody && responseBody.message) {\r\n          errorMessage = responseBody.message;\r\n        }\r\n\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      return await res.json();\r\n    } catch (error) {\r\n      console.error(\"Error Creating Vaccine Schedule:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const CreateVaccineProgress = async (id: string) => {\r\n    const data = {\r\n      infant_id: id,\r\n    };\r\n\r\n    try {\r\n      const res = await fetch(`${API_URL}/parent/progress`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${authToken}`,\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n\r\n      if (!res.ok) {\r\n        // Check if response is not OK (status code not in range 200-299)\r\n        let errorMessage = \"Failed to create vaccine progress\";\r\n        const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n        // Check if response body has an error message from the backend\r\n        if (responseBody && responseBody.message) {\r\n          errorMessage = responseBody.message;\r\n        }\r\n\r\n        throw new Error(errorMessage);\r\n      }\r\n\r\n      return await res.json();\r\n    } catch (error) {\r\n      console.error(\"Error Creating Vaccine Progress:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const infantDataDownload = async () => {\r\n    const res = await fetch(`${API_URL}/admin/infant-data`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n    });\r\n\r\n    if (!res.ok) {\r\n      // Check if response is not OK (status code not in range 200-299)\r\n      let errorMessage = \"Failed to get infant data to download\";\r\n      const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n      // Check if response body has an error message from the backend\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  const UploadDocumentToInfant = async (id: string, pdfFile: File) => {\r\n    const formData = new FormData();\r\n    // Use \"pdf\" as the key to match the server's expectation.\r\n    formData.append(\"pdf\", pdfFile);\r\n\r\n    try {\r\n      const res = await fetch(`${API_URL}/admin/upload-pdf/${id}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${authToken}`,\r\n          // Do not set 'Content-Type' header when sending FormData\r\n        },\r\n        body: formData,\r\n      });\r\n\r\n      if (!res.ok) {\r\n        const responseBody = await res.json();\r\n        throw new Error(responseBody?.message);\r\n      }\r\n\r\n      return await res.json();\r\n    } catch (error) {\r\n      console.error(\"Error Updating Infant Image:\", error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const downloadInfantVaccineProgress = async (id: string) => {\r\n    const res = await fetch(`${API_URL}/admin/download/${id}`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer ${authToken}`,\r\n      },\r\n    });\r\n\r\n    if (!res.ok) {\r\n      // Check if response is not OK (status code not in range 200-299)\r\n      let errorMessage = \"Failed to get infant detail\";\r\n      const responseBody = await res.json(); // Attempt to parse response body as JSON\r\n\r\n      // Check if response body has an error message from the backend\r\n      if (responseBody && responseBody.message) {\r\n        errorMessage = responseBody.message;\r\n      }\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n\r\n    return await res.json();\r\n  };\r\n\r\n  return (\r\n    <ProtectedRoutesContext.Provider\r\n      value={{\r\n        vaccinePercentageRoutes,\r\n        parentsList,\r\n        infantList,\r\n        deleteParent,\r\n        updateParent,\r\n        createInfant,\r\n        UploadChildProfileImage,\r\n        deleteInfants,\r\n        updateInfant,\r\n        getOneInfantDetail,\r\n        updateVaccineStatus,\r\n        getPushToken,\r\n        updatVaccineSchedDate,\r\n        getAdminDataDashBoard,\r\n        CreateVaccineSchedule,\r\n        CreateVaccineProgress,\r\n        infantDataDownload,\r\n        UploadDocumentToInfant,\r\n        downloadInfantVaccineProgress,\r\n      }}\r\n    >\r\n      {children}\r\n    </ProtectedRoutesContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useProtectedRoutesApi = (): ProtectedRoutesType => {\r\n  const context = useContext(ProtectedRoutesContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"Getting error from ProtectedRoutes API\");\r\n  }\r\n  return context;\r\n};\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 617, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 623, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/natha/OneDrive/Desktop/infantguardadmin/src/providers/TanStackProvider.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\r\nimport { ReactNode, useState } from \"react\";\r\n\r\nexport default function TanStackProvider({\r\n  children,\r\n}: {\r\n  children: ReactNode;\r\n}) {\r\n  const [queryClient] = useState(() => new QueryClient());\r\n\r\n  return (\r\n    <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAGA;AADA;AAAA;AAFA;;;;AAKe,SAAS,iBAAiB,EACvC,QAAQ,EAGT;IACC,MAAM,CAAC,YAAY,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE,IAAM,IAAI,6KAAA,CAAA,cAAW;IAEpD,qBACE,8OAAC,sLAAA,CAAA,sBAAmB;QAAC,QAAQ;kBAAc;;;;;;AAE/C"}},
    {"offset": {"line": 645, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}